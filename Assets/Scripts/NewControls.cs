//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Scripts/Other/NewControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewControls"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""8cc9b362-bfe3-432e-9576-a74a9bc8d23e"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5a3b287a-86f2-456c-87ff-0f0a614799a6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Target"",
                    ""type"": ""Button"",
                    ""id"": ""e1ce24c4-145a-44cd-b936-610339e6bc3e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dogde"",
                    ""type"": ""Button"",
                    ""id"": ""bb122ec1-13f4-4c6a-ae19-c6dcd7381a14"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""995766e9-7c4d-4768-8928-0f0a10d683f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""aa69c326-2dbb-4efa-933e-83e60b372091"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""49c344b0-b618-445a-87b4-b72033db6114"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""228f9810-c05d-4dd3-869a-33cb8aaf8566"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""a37514f0-3cf6-4e5d-8c84-e0d242ff7fea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""50722d5e-60e4-45c5-a9c5-a3e85da8071e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""7c9bd8f4-0c59-4f2b-855f-aeb9530393c9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sealth/Unsealth"",
                    ""type"": ""Button"",
                    ""id"": ""e53cc2b9-82f5-4020-9213-c262b3299c5a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""e86b4568-c8f9-4689-a335-d382c11dd5b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""fb93b089-5570-4ada-994d-a0e648fed94f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""1d78cf12-2dfb-46b6-86a8-83872047d750"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill3"",
                    ""type"": ""Button"",
                    ""id"": ""fe8e9ac4-acee-44e1-b6d4-455938ccf6fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill4"",
                    ""type"": ""Button"",
                    ""id"": ""e5d94bcf-6829-4c22-b9da-337fba7b8558"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""17cce1a0-2d43-4b77-97b5-6eefc057ee25"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Map"",
                    ""type"": ""Button"",
                    ""id"": ""3982981a-3587-4b7a-9d74-11a6fd23a1d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillPanel"",
                    ""type"": ""Button"",
                    ""id"": ""23470cf6-d5de-4dac-b688-5b58f3379bdf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DungeonDescript"",
                    ""type"": ""Button"",
                    ""id"": ""14eb9b33-7b50-43c2-b39e-159408c90b7b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dialoge"",
                    ""type"": ""Button"",
                    ""id"": ""eb1767d8-c29b-4bc2-9e5e-9f2a490a94a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EcsMode"",
                    ""type"": ""Button"",
                    ""id"": ""662c6f60-529c-4a14-b592-31d215c3c123"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMode"",
                    ""type"": ""Button"",
                    ""id"": ""70215e14-e40c-48b6-9a3f-c0da278ebbad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""f049eb2d-8d0e-4c06-969c-9e35302b7cbf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""74f75f58-43e7-4074-8ddc-4ce26e0b3155"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StatBoard"",
                    ""type"": ""Button"",
                    ""id"": ""22cf53a2-7e49-43e1-bd4f-796b34a985a5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1dcd18ad-e1a1-4ffe-9307-9c8bc7481d07"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3082fe98-7813-4f3b-bd15-e12235d0d524"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Dogde"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53e31924-4965-48b1-840a-fd13ecebad98"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c75b3397-35a4-43cd-9dcb-2c1209f75051"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecc3d8ef-ec34-4160-a9c3-fbbe51515c58"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cb6d001-9333-45b6-b76b-922328b16d23"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d3874fa-6a0b-4d97-8494-6a240921d021"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c897549e-507d-483e-aab7-3c95b146f4b9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37d82b85-1d52-4ce8-aab0-249ccbb346a1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85532dc5-b264-433a-b83b-aa22b15001a4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Sealth/Unsealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68d99e8f-610a-4574-a4ad-2afed75c729f"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba61f751-18fb-4a65-9e48-4cfa9cd3e194"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c969213-4762-447b-a2f3-6eb13ab09ad2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e66140f-a4ec-4f26-b89b-7ad69d97e7ad"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Skill3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b87f588-58c7-48e9-9ea8-8fc87cfa22b9"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Skill4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c9f5eee-9e8a-4a9a-963c-608bfc2360cc"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd558b2c-321e-4a81-9c6c-a85f0860ca56"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""SkillPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a660d39-352a-4033-b6d6-ddc6d9a41188"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""DungeonDescript"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""796d5330-6c37-41f2-84d8-8dbf933be22a"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Dialoge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f3e7ef7-fea7-4562-8af7-02feec1f201a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EcsMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cca4d5df-e487-4074-97c3-e8e165a2ddc1"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f63e4c5f-1af0-4102-a260-4c759fc138f0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4761842f-6405-4ad0-87b0-8d8ae474c7ec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2c11c733-0211-407c-9f5a-a4f04360995d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7499b41c-c448-4a80-be6d-4f6365a04e3f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c1b2bac1-f019-4e38-ba35-b6ed88e67e3a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b9fe6c78-3275-469b-bb7a-a255c834d485"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66e20e67-b812-4199-a4be-33d8a3a3383a"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""StatBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8893f53f-20cc-4d7c-8940-f0e287c0336b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""MouseMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""024c844a-1439-4ae7-8f5b-594effd97b83"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_Jump = m_PlayerInput.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInput_Target = m_PlayerInput.FindAction("Target", throwIfNotFound: true);
        m_PlayerInput_Dogde = m_PlayerInput.FindAction("Dogde", throwIfNotFound: true);
        m_PlayerInput_Move = m_PlayerInput.FindAction("Move", throwIfNotFound: true);
        m_PlayerInput_Look = m_PlayerInput.FindAction("Look", throwIfNotFound: true);
        m_PlayerInput_Attack = m_PlayerInput.FindAction("Attack", throwIfNotFound: true);
        m_PlayerInput_Sprint = m_PlayerInput.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerInput_Crouch = m_PlayerInput.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerInput_Secondary = m_PlayerInput.FindAction("Secondary", throwIfNotFound: true);
        m_PlayerInput_Roll = m_PlayerInput.FindAction("Roll", throwIfNotFound: true);
        m_PlayerInput_SealthUnsealth = m_PlayerInput.FindAction("Sealth/Unsealth", throwIfNotFound: true);
        m_PlayerInput_Test = m_PlayerInput.FindAction("Test", throwIfNotFound: true);
        m_PlayerInput_Skill1 = m_PlayerInput.FindAction("Skill1", throwIfNotFound: true);
        m_PlayerInput_Skill2 = m_PlayerInput.FindAction("Skill2", throwIfNotFound: true);
        m_PlayerInput_Skill3 = m_PlayerInput.FindAction("Skill3", throwIfNotFound: true);
        m_PlayerInput_Skill4 = m_PlayerInput.FindAction("Skill4", throwIfNotFound: true);
        m_PlayerInput_Inventory = m_PlayerInput.FindAction("Inventory", throwIfNotFound: true);
        m_PlayerInput_Map = m_PlayerInput.FindAction("Map", throwIfNotFound: true);
        m_PlayerInput_SkillPanel = m_PlayerInput.FindAction("SkillPanel", throwIfNotFound: true);
        m_PlayerInput_DungeonDescript = m_PlayerInput.FindAction("DungeonDescript", throwIfNotFound: true);
        m_PlayerInput_Dialoge = m_PlayerInput.FindAction("Dialoge", throwIfNotFound: true);
        m_PlayerInput_EcsMode = m_PlayerInput.FindAction("EcsMode", throwIfNotFound: true);
        m_PlayerInput_MouseMode = m_PlayerInput.FindAction("MouseMode", throwIfNotFound: true);
        m_PlayerInput_CameraZoom = m_PlayerInput.FindAction("CameraZoom", throwIfNotFound: true);
        m_PlayerInput_Pickup = m_PlayerInput.FindAction("Pickup", throwIfNotFound: true);
        m_PlayerInput_StatBoard = m_PlayerInput.FindAction("StatBoard", throwIfNotFound: true);
    }

    ~@NewControls()
    {
        UnityEngine.Debug.Assert(!m_PlayerInput.enabled, "This will cause a leak and performance issues, NewControls.PlayerInput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private List<IPlayerInputActions> m_PlayerInputActionsCallbackInterfaces = new List<IPlayerInputActions>();
    private readonly InputAction m_PlayerInput_Jump;
    private readonly InputAction m_PlayerInput_Target;
    private readonly InputAction m_PlayerInput_Dogde;
    private readonly InputAction m_PlayerInput_Move;
    private readonly InputAction m_PlayerInput_Look;
    private readonly InputAction m_PlayerInput_Attack;
    private readonly InputAction m_PlayerInput_Sprint;
    private readonly InputAction m_PlayerInput_Crouch;
    private readonly InputAction m_PlayerInput_Secondary;
    private readonly InputAction m_PlayerInput_Roll;
    private readonly InputAction m_PlayerInput_SealthUnsealth;
    private readonly InputAction m_PlayerInput_Test;
    private readonly InputAction m_PlayerInput_Skill1;
    private readonly InputAction m_PlayerInput_Skill2;
    private readonly InputAction m_PlayerInput_Skill3;
    private readonly InputAction m_PlayerInput_Skill4;
    private readonly InputAction m_PlayerInput_Inventory;
    private readonly InputAction m_PlayerInput_Map;
    private readonly InputAction m_PlayerInput_SkillPanel;
    private readonly InputAction m_PlayerInput_DungeonDescript;
    private readonly InputAction m_PlayerInput_Dialoge;
    private readonly InputAction m_PlayerInput_EcsMode;
    private readonly InputAction m_PlayerInput_MouseMode;
    private readonly InputAction m_PlayerInput_CameraZoom;
    private readonly InputAction m_PlayerInput_Pickup;
    private readonly InputAction m_PlayerInput_StatBoard;
    public struct PlayerInputActions
    {
        private @NewControls m_Wrapper;
        public PlayerInputActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerInput_Jump;
        public InputAction @Target => m_Wrapper.m_PlayerInput_Target;
        public InputAction @Dogde => m_Wrapper.m_PlayerInput_Dogde;
        public InputAction @Move => m_Wrapper.m_PlayerInput_Move;
        public InputAction @Look => m_Wrapper.m_PlayerInput_Look;
        public InputAction @Attack => m_Wrapper.m_PlayerInput_Attack;
        public InputAction @Sprint => m_Wrapper.m_PlayerInput_Sprint;
        public InputAction @Crouch => m_Wrapper.m_PlayerInput_Crouch;
        public InputAction @Secondary => m_Wrapper.m_PlayerInput_Secondary;
        public InputAction @Roll => m_Wrapper.m_PlayerInput_Roll;
        public InputAction @SealthUnsealth => m_Wrapper.m_PlayerInput_SealthUnsealth;
        public InputAction @Test => m_Wrapper.m_PlayerInput_Test;
        public InputAction @Skill1 => m_Wrapper.m_PlayerInput_Skill1;
        public InputAction @Skill2 => m_Wrapper.m_PlayerInput_Skill2;
        public InputAction @Skill3 => m_Wrapper.m_PlayerInput_Skill3;
        public InputAction @Skill4 => m_Wrapper.m_PlayerInput_Skill4;
        public InputAction @Inventory => m_Wrapper.m_PlayerInput_Inventory;
        public InputAction @Map => m_Wrapper.m_PlayerInput_Map;
        public InputAction @SkillPanel => m_Wrapper.m_PlayerInput_SkillPanel;
        public InputAction @DungeonDescript => m_Wrapper.m_PlayerInput_DungeonDescript;
        public InputAction @Dialoge => m_Wrapper.m_PlayerInput_Dialoge;
        public InputAction @EcsMode => m_Wrapper.m_PlayerInput_EcsMode;
        public InputAction @MouseMode => m_Wrapper.m_PlayerInput_MouseMode;
        public InputAction @CameraZoom => m_Wrapper.m_PlayerInput_CameraZoom;
        public InputAction @Pickup => m_Wrapper.m_PlayerInput_Pickup;
        public InputAction @StatBoard => m_Wrapper.m_PlayerInput_StatBoard;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Target.started += instance.OnTarget;
            @Target.performed += instance.OnTarget;
            @Target.canceled += instance.OnTarget;
            @Dogde.started += instance.OnDogde;
            @Dogde.performed += instance.OnDogde;
            @Dogde.canceled += instance.OnDogde;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Secondary.started += instance.OnSecondary;
            @Secondary.performed += instance.OnSecondary;
            @Secondary.canceled += instance.OnSecondary;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @SealthUnsealth.started += instance.OnSealthUnsealth;
            @SealthUnsealth.performed += instance.OnSealthUnsealth;
            @SealthUnsealth.canceled += instance.OnSealthUnsealth;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
            @Skill3.started += instance.OnSkill3;
            @Skill3.performed += instance.OnSkill3;
            @Skill3.canceled += instance.OnSkill3;
            @Skill4.started += instance.OnSkill4;
            @Skill4.performed += instance.OnSkill4;
            @Skill4.canceled += instance.OnSkill4;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Map.started += instance.OnMap;
            @Map.performed += instance.OnMap;
            @Map.canceled += instance.OnMap;
            @SkillPanel.started += instance.OnSkillPanel;
            @SkillPanel.performed += instance.OnSkillPanel;
            @SkillPanel.canceled += instance.OnSkillPanel;
            @DungeonDescript.started += instance.OnDungeonDescript;
            @DungeonDescript.performed += instance.OnDungeonDescript;
            @DungeonDescript.canceled += instance.OnDungeonDescript;
            @Dialoge.started += instance.OnDialoge;
            @Dialoge.performed += instance.OnDialoge;
            @Dialoge.canceled += instance.OnDialoge;
            @EcsMode.started += instance.OnEcsMode;
            @EcsMode.performed += instance.OnEcsMode;
            @EcsMode.canceled += instance.OnEcsMode;
            @MouseMode.started += instance.OnMouseMode;
            @MouseMode.performed += instance.OnMouseMode;
            @MouseMode.canceled += instance.OnMouseMode;
            @CameraZoom.started += instance.OnCameraZoom;
            @CameraZoom.performed += instance.OnCameraZoom;
            @CameraZoom.canceled += instance.OnCameraZoom;
            @Pickup.started += instance.OnPickup;
            @Pickup.performed += instance.OnPickup;
            @Pickup.canceled += instance.OnPickup;
            @StatBoard.started += instance.OnStatBoard;
            @StatBoard.performed += instance.OnStatBoard;
            @StatBoard.canceled += instance.OnStatBoard;
        }

        private void UnregisterCallbacks(IPlayerInputActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Target.started -= instance.OnTarget;
            @Target.performed -= instance.OnTarget;
            @Target.canceled -= instance.OnTarget;
            @Dogde.started -= instance.OnDogde;
            @Dogde.performed -= instance.OnDogde;
            @Dogde.canceled -= instance.OnDogde;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Secondary.started -= instance.OnSecondary;
            @Secondary.performed -= instance.OnSecondary;
            @Secondary.canceled -= instance.OnSecondary;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @SealthUnsealth.started -= instance.OnSealthUnsealth;
            @SealthUnsealth.performed -= instance.OnSealthUnsealth;
            @SealthUnsealth.canceled -= instance.OnSealthUnsealth;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
            @Skill3.started -= instance.OnSkill3;
            @Skill3.performed -= instance.OnSkill3;
            @Skill3.canceled -= instance.OnSkill3;
            @Skill4.started -= instance.OnSkill4;
            @Skill4.performed -= instance.OnSkill4;
            @Skill4.canceled -= instance.OnSkill4;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Map.started -= instance.OnMap;
            @Map.performed -= instance.OnMap;
            @Map.canceled -= instance.OnMap;
            @SkillPanel.started -= instance.OnSkillPanel;
            @SkillPanel.performed -= instance.OnSkillPanel;
            @SkillPanel.canceled -= instance.OnSkillPanel;
            @DungeonDescript.started -= instance.OnDungeonDescript;
            @DungeonDescript.performed -= instance.OnDungeonDescript;
            @DungeonDescript.canceled -= instance.OnDungeonDescript;
            @Dialoge.started -= instance.OnDialoge;
            @Dialoge.performed -= instance.OnDialoge;
            @Dialoge.canceled -= instance.OnDialoge;
            @EcsMode.started -= instance.OnEcsMode;
            @EcsMode.performed -= instance.OnEcsMode;
            @EcsMode.canceled -= instance.OnEcsMode;
            @MouseMode.started -= instance.OnMouseMode;
            @MouseMode.performed -= instance.OnMouseMode;
            @MouseMode.canceled -= instance.OnMouseMode;
            @CameraZoom.started -= instance.OnCameraZoom;
            @CameraZoom.performed -= instance.OnCameraZoom;
            @CameraZoom.canceled -= instance.OnCameraZoom;
            @Pickup.started -= instance.OnPickup;
            @Pickup.performed -= instance.OnPickup;
            @Pickup.canceled -= instance.OnPickup;
            @StatBoard.started -= instance.OnStatBoard;
            @StatBoard.performed -= instance.OnStatBoard;
            @StatBoard.canceled -= instance.OnStatBoard;
        }

        public void RemoveCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerInputActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnTarget(InputAction.CallbackContext context);
        void OnDogde(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnSealthUnsealth(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnSkill1(InputAction.CallbackContext context);
        void OnSkill2(InputAction.CallbackContext context);
        void OnSkill3(InputAction.CallbackContext context);
        void OnSkill4(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnMap(InputAction.CallbackContext context);
        void OnSkillPanel(InputAction.CallbackContext context);
        void OnDungeonDescript(InputAction.CallbackContext context);
        void OnDialoge(InputAction.CallbackContext context);
        void OnEcsMode(InputAction.CallbackContext context);
        void OnMouseMode(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnStatBoard(InputAction.CallbackContext context);
    }
}
